// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dblooman/schema-registry-client/models"
)

// NewLookUpSchemaUnderSubjectParams creates a new LookUpSchemaUnderSubjectParams object
// with the default values initialized.
func NewLookUpSchemaUnderSubjectParams() *LookUpSchemaUnderSubjectParams {
	var ()
	return &LookUpSchemaUnderSubjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLookUpSchemaUnderSubjectParamsWithTimeout creates a new LookUpSchemaUnderSubjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLookUpSchemaUnderSubjectParamsWithTimeout(timeout time.Duration) *LookUpSchemaUnderSubjectParams {
	var ()
	return &LookUpSchemaUnderSubjectParams{

		timeout: timeout,
	}
}

// NewLookUpSchemaUnderSubjectParamsWithContext creates a new LookUpSchemaUnderSubjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewLookUpSchemaUnderSubjectParamsWithContext(ctx context.Context) *LookUpSchemaUnderSubjectParams {
	var ()
	return &LookUpSchemaUnderSubjectParams{

		Context: ctx,
	}
}

// NewLookUpSchemaUnderSubjectParamsWithHTTPClient creates a new LookUpSchemaUnderSubjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLookUpSchemaUnderSubjectParamsWithHTTPClient(client *http.Client) *LookUpSchemaUnderSubjectParams {
	var ()
	return &LookUpSchemaUnderSubjectParams{
		HTTPClient: client,
	}
}

/*LookUpSchemaUnderSubjectParams contains all the parameters to send to the API endpoint
for the look up schema under subject operation typically these are written to a http.Request
*/
type LookUpSchemaUnderSubjectParams struct {

	/*Body
	  Schema

	*/
	Body *models.RegisterSchemaRequest
	/*Deleted*/
	Deleted *bool
	/*Subject
	  Subject under which the schema will be registered

	*/
	Subject string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithTimeout(timeout time.Duration) *LookUpSchemaUnderSubjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithContext(ctx context.Context) *LookUpSchemaUnderSubjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithHTTPClient(client *http.Client) *LookUpSchemaUnderSubjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithBody(body *models.RegisterSchemaRequest) *LookUpSchemaUnderSubjectParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetBody(body *models.RegisterSchemaRequest) {
	o.Body = body
}

// WithDeleted adds the deleted to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithDeleted(deleted *bool) *LookUpSchemaUnderSubjectParams {
	o.SetDeleted(deleted)
	return o
}

// SetDeleted adds the deleted to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetDeleted(deleted *bool) {
	o.Deleted = deleted
}

// WithSubject adds the subject to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) WithSubject(subject string) *LookUpSchemaUnderSubjectParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the look up schema under subject params
func (o *LookUpSchemaUnderSubjectParams) SetSubject(subject string) {
	o.Subject = subject
}

// WriteToRequest writes these params to a swagger request
func (o *LookUpSchemaUnderSubjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Deleted != nil {

		// query param deleted
		var qrDeleted bool
		if o.Deleted != nil {
			qrDeleted = *o.Deleted
		}
		qDeleted := swag.FormatBool(qrDeleted)
		if qDeleted != "" {
			if err := r.SetQueryParam("deleted", qDeleted); err != nil {
				return err
			}
		}

	}

	// path param subject
	if err := r.SetPathParam("subject", o.Subject); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
