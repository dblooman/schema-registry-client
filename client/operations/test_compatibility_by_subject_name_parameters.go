// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/dblooman/schema-registry-client/models"
)

// NewTestCompatibilityBySubjectNameParams creates a new TestCompatibilityBySubjectNameParams object
// with the default values initialized.
func NewTestCompatibilityBySubjectNameParams() *TestCompatibilityBySubjectNameParams {
	var ()
	return &TestCompatibilityBySubjectNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTestCompatibilityBySubjectNameParamsWithTimeout creates a new TestCompatibilityBySubjectNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTestCompatibilityBySubjectNameParamsWithTimeout(timeout time.Duration) *TestCompatibilityBySubjectNameParams {
	var ()
	return &TestCompatibilityBySubjectNameParams{

		timeout: timeout,
	}
}

// NewTestCompatibilityBySubjectNameParamsWithContext creates a new TestCompatibilityBySubjectNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewTestCompatibilityBySubjectNameParamsWithContext(ctx context.Context) *TestCompatibilityBySubjectNameParams {
	var ()
	return &TestCompatibilityBySubjectNameParams{

		Context: ctx,
	}
}

// NewTestCompatibilityBySubjectNameParamsWithHTTPClient creates a new TestCompatibilityBySubjectNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTestCompatibilityBySubjectNameParamsWithHTTPClient(client *http.Client) *TestCompatibilityBySubjectNameParams {
	var ()
	return &TestCompatibilityBySubjectNameParams{
		HTTPClient: client,
	}
}

/*TestCompatibilityBySubjectNameParams contains all the parameters to send to the API endpoint
for the test compatibility by subject name operation typically these are written to a http.Request
*/
type TestCompatibilityBySubjectNameParams struct {

	/*Accept*/
	Accept *string
	/*ContentType*/
	ContentType *string
	/*Body
	  Schema

	*/
	Body *models.RegisterSchemaRequest
	/*Subject
	  Subject of the schema version against which compatibility is to be tested

	*/
	Subject string
	/*Version
	  Version of the subject's schema against which compatibility is to be tested. Valid values for versionId are between [1,2^31-1] or the string "latest"."latest" checks compatibility of the input schema with the last registered schema under the specified subject

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithTimeout(timeout time.Duration) *TestCompatibilityBySubjectNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithContext(ctx context.Context) *TestCompatibilityBySubjectNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithHTTPClient(client *http.Client) *TestCompatibilityBySubjectNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccept adds the accept to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithAccept(accept *string) *TestCompatibilityBySubjectNameParams {
	o.SetAccept(accept)
	return o
}

// SetAccept adds the accept to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetAccept(accept *string) {
	o.Accept = accept
}

// WithContentType adds the contentType to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithContentType(contentType *string) *TestCompatibilityBySubjectNameParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithBody adds the body to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithBody(body *models.RegisterSchemaRequest) *TestCompatibilityBySubjectNameParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetBody(body *models.RegisterSchemaRequest) {
	o.Body = body
}

// WithSubject adds the subject to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithSubject(subject string) *TestCompatibilityBySubjectNameParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetSubject(subject string) {
	o.Subject = subject
}

// WithVersion adds the version to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) WithVersion(version string) *TestCompatibilityBySubjectNameParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the test compatibility by subject name params
func (o *TestCompatibilityBySubjectNameParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *TestCompatibilityBySubjectNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accept != nil {

		// header param Accept
		if err := r.SetHeaderParam("Accept", *o.Accept); err != nil {
			return err
		}

	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param subject
	if err := r.SetPathParam("subject", o.Subject); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
