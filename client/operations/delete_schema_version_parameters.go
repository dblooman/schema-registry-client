// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteSchemaVersionParams creates a new DeleteSchemaVersionParams object
// with the default values initialized.
func NewDeleteSchemaVersionParams() *DeleteSchemaVersionParams {
	var ()
	return &DeleteSchemaVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSchemaVersionParamsWithTimeout creates a new DeleteSchemaVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSchemaVersionParamsWithTimeout(timeout time.Duration) *DeleteSchemaVersionParams {
	var ()
	return &DeleteSchemaVersionParams{

		timeout: timeout,
	}
}

// NewDeleteSchemaVersionParamsWithContext creates a new DeleteSchemaVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSchemaVersionParamsWithContext(ctx context.Context) *DeleteSchemaVersionParams {
	var ()
	return &DeleteSchemaVersionParams{

		Context: ctx,
	}
}

// NewDeleteSchemaVersionParamsWithHTTPClient creates a new DeleteSchemaVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSchemaVersionParamsWithHTTPClient(client *http.Client) *DeleteSchemaVersionParams {
	var ()
	return &DeleteSchemaVersionParams{
		HTTPClient: client,
	}
}

/*DeleteSchemaVersionParams contains all the parameters to send to the API endpoint
for the delete schema version operation typically these are written to a http.Request
*/
type DeleteSchemaVersionParams struct {

	/*Permanent*/
	Permanent *bool
	/*Subject
	  Name of the Subject

	*/
	Subject string
	/*Version
	  Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string "latest". "latest" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete schema version params
func (o *DeleteSchemaVersionParams) WithTimeout(timeout time.Duration) *DeleteSchemaVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete schema version params
func (o *DeleteSchemaVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete schema version params
func (o *DeleteSchemaVersionParams) WithContext(ctx context.Context) *DeleteSchemaVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete schema version params
func (o *DeleteSchemaVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete schema version params
func (o *DeleteSchemaVersionParams) WithHTTPClient(client *http.Client) *DeleteSchemaVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete schema version params
func (o *DeleteSchemaVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPermanent adds the permanent to the delete schema version params
func (o *DeleteSchemaVersionParams) WithPermanent(permanent *bool) *DeleteSchemaVersionParams {
	o.SetPermanent(permanent)
	return o
}

// SetPermanent adds the permanent to the delete schema version params
func (o *DeleteSchemaVersionParams) SetPermanent(permanent *bool) {
	o.Permanent = permanent
}

// WithSubject adds the subject to the delete schema version params
func (o *DeleteSchemaVersionParams) WithSubject(subject string) *DeleteSchemaVersionParams {
	o.SetSubject(subject)
	return o
}

// SetSubject adds the subject to the delete schema version params
func (o *DeleteSchemaVersionParams) SetSubject(subject string) {
	o.Subject = subject
}

// WithVersion adds the version to the delete schema version params
func (o *DeleteSchemaVersionParams) WithVersion(version string) *DeleteSchemaVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete schema version params
func (o *DeleteSchemaVersionParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSchemaVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Permanent != nil {

		// query param permanent
		var qrPermanent bool
		if o.Permanent != nil {
			qrPermanent = *o.Permanent
		}
		qPermanent := swag.FormatBool(qrPermanent)
		if qPermanent != "" {
			if err := r.SetQueryParam("permanent", qPermanent); err != nil {
				return err
			}
		}

	}

	// path param subject
	if err := r.SetPathParam("subject", o.Subject); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
